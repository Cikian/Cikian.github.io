<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDK配置环境变量+eclipse安装使用</title>
      <link href="/2022/03/01/jdk-pei-zhi-huan-jing-bian-liang-eclipse-an-zhuang-shi-yong/"/>
      <url>/2022/03/01/jdk-pei-zhi-huan-jing-bian-liang-eclipse-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载JDK"><a href="#一、下载JDK" class="headerlink" title="一、下载JDK"></a>一、下载JDK</h2><ol><li>访问Oracle官网下载最新版JDK<a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a>，也可<a href="http://download.cikian.cn/exe/jdk-17_windows-x64_bin.exe">点击此处</a>下载（在我自己服务器，绝对安全，放心）</li></ol><p><img src="https://img.cikian.cn/blog-img/jdk01.png"></p><p>以Windows系统举例，选择Windows下的第二个（第一个为压缩包，第二个为安装程序，第三个是Windows Installee的数据包）。</p><ol start="2"><li>打开下载好的安装包。</li></ol><p><img src="https://img.cikian.cn/blog-img/jdk02.png"></p><p>点击下一步。</p><p><img src="https://img.cikian.cn/blog-img/jdk03.png"></p><p>选择一个安装位置。</p><p>推荐在C盘意外的盘符给java一个单独的文件夹，这里演示的安装位置为F:\XX\java\jdk-17.0.2\</p><p><img src="https://img.cikian.cn/blog-img/jdk04.png"></p><p>点击确定，等待安装。</p><p><img src="https://img.cikian.cn/blog-img/jdk05.png"></p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p><strong>以win10系统为例</strong></p><ol><li>右键“此电脑”，点击属性，在弹出的窗口点击“高级系统设置”</li></ol><p><img src="https://img.cikian.cn/blog-img/path01.png"></p><p>在弹出的窗口点击“环境变量”。</p><ol start="2"><li><p>点击系统变量中的“新建”</p><p><img src="https://img.cikian.cn/blog-img/path02.png"></p></li><li><p>变量名输入“java_home”,变量值处点击“浏览目录”，选择到jdk安装的文件夹（显示版本号的文件夹，当然，这是在你没有改文件夹名称的情况下）</p></li></ol><p><img src="https://img.cikian.cn/blog-img/path03.png"></p><ol start="4"><li>选中系统变量中的path，点击“编辑”</li></ol><p><img src="https://img.cikian.cn/blog-img/path04.png"></p><ol start="5"><li>在弹出的窗口中点击“新建”，再点击“浏览”，选择到安装jdk文件夹下的“bin”文件夹，全部窗口点击“确定”，推出</li></ol><p><img src="https://img.cikian.cn/blog-img/path05.png"></p><p>此时，jdk已经安装好并且已经配置好了环境变量。</p><h2 id="三、安装eclipse"><a href="#三、安装eclipse" class="headerlink" title="三、安装eclipse"></a>三、安装eclipse</h2><ol><li>访问eclipse官网<a href="https://www.eclipse.org/downloads/">Eclipse Downloads | The Eclipse Foundation</a>下载eclipse，国内访问速度比较慢，也可<a href="http://download.cikian.cn/exe/eclipse-inst-jre-win64.exe">点击此处</a>下载（在我自己服务器，绝对安全，放心）</li><li>下载完成后，点击第一项“Eclipse IDE for Java Developers”</li></ol><p><img src="https://img.cikian.cn/blog-img/ep01.png"></p><ol start="3"><li>选择安装目录（第二个路径），第一个路径为JDK的安装文件夹，正常情况下默认就是正确的，不需要更改，选择好安装路径后点击“INSTALL”</li></ol><p><img src="https://img.cikian.cn/blog-img/ep02.png"></p><ol start="4"><li>接下来会弹出一个窗口，点击同意（Accept Now）即可</li></ol><p><img src="https://img.cikian.cn/blog-img/ep03.png"></p><ol start="5"><li>由于安装过程会下载软件需要的文件，所以国内安装过程比较漫长，耐心等待即可，安装完成之后点击绿色按钮即可运行eclipse</li></ol><p><img src="https://img.cikian.cn/blog-img/ep04.png"></p><ol start="6"><li>运行后，欢迎页面关掉即可，eclipse安装成功！</li></ol><p><img src="http://img.cikian.cn/blog-img/ep05.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript—动画</title>
      <link href="/2022/02/15/javascript-dong-hua/"/>
      <url>/2022/02/15/javascript-dong-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript—动画"><a href="#JavaScript—动画" class="headerlink" title="JavaScript—动画"></a>JavaScript—动画</h1><h2 id="一、动画原理"><a href="#一、动画原理" class="headerlink" title="一、动画原理"></a>一、动画原理</h2><p>通过定时器setInterval不断移动盒子位置。</p><p>步骤：</p><ol><li>获得盒子当前位置；</li><li>让盒子在当前位置加上1个移动距离；</li><li>利用定时器不断重复这个操作；</li><li>结束定时器。</li></ol><p>注意：元素需要加定位。</p><p>例：</p><p>HTML代码：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>move<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/js.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>CSS代码：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.move</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>JS代码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.move'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取需要移动的元素</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//新建一个定时器</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>div<span class="token punctuation">.</span>offsetLeft <span class="token operator">>=</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//停止定时器的条件：移动距离大于等于400px时停止</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//停止定时器</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定时器执行的操作：每1毫秒移动一个像素</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="二、简单动画函数封装"><a href="#二、简单动画函数封装" class="headerlink" title="二、简单动画函数封装"></a>二、简单动画函数封装</h2><p>注意函数需要传递的2个参数：<strong>动画对象</strong>和<strong>移动的距离</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.move'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取元素</span><span class="token function">animate</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//调用函数</span></code></pre><h2 id="三、给不同元素记录不同定时器"><a href="#三、给不同元素记录不同定时器" class="headerlink" title="三、给不同元素记录不同定时器"></a>三、给不同元素记录不同定时器</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//一个元素同时只能存在一个定时器</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//给不同元素添加定时器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="四、缓动效果原理"><a href="#四、缓动效果原理" class="headerlink" title="四、缓动效果原理"></a>四、缓动效果原理</h2><p>缓动动画就是让元素运动速度有所变化，如常见的“慢慢停下来”。</p><p>思路：</p><ol><li>让盒子每次移动的距离变小，速度就会慢下来；</li><li>核心算法：（目标值 - 现在的位置）&#x2F; 10  作为每次移动的距离步长；</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">animate</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> obj<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        step <span class="token operator">=</span> step <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span> <span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> step <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="五、动画函数添加回调函数"><a href="#五、动画函数添加回调函数" class="headerlink" title="五、动画函数添加回调函数"></a>五、动画函数添加回调函数</h2><p><strong>回调函数原理：</strong>函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程叫做<strong>回调</strong>。</p><p>回调函数写的位置：定时器结束位置。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 动画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript—作用域</title>
      <link href="/2022/02/13/javascript-zuo-yong-yu/"/>
      <url>/2022/02/13/javascript-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript—作用域"><a href="#JavaScript—作用域" class="headerlink" title="JavaScript—作用域"></a>JavaScript—作用域</h1><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的<strong>作用域</strong>。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h2 id="一、作用域（es6之前）"><a href="#一、作用域（es6之前）" class="headerlink" title="一、作用域（es6之前）"></a>一、作用域（es6之前）</h2><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1.全局作用域"></a>1.全局作用域</h3><p>在整个script标签或者一个.js文件中。</p><h3 id="2-局部作用域（函数作用域）"><a href="#2-局部作用域（函数作用域）" class="headerlink" title="2.局部作用域（函数作用域）"></a>2.局部作用域（函数作用域）</h3><p>在函数内部，只在函数内部起效果和作用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">ft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码中，两个 ‘num’ 不会冲突。</p><h2 id="二、变量的作用域"><a href="#二、变量的作用域" class="headerlink" title="二、变量的作用域"></a>二、变量的作用域</h2><h3 id="1-全局变量"><a href="#1-全局变量" class="headerlink" title="1.全局变量"></a>1.全局变量</h3><p>在全局作用域下的变量。</p><p><strong>※ 在函数内部没有声明而直接赋值的变量也属于全局变量。</strong></p><h3 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2.局部变量"></a>2.局部变量</h3><p>在局部作用域下的变量。（在函数内部的变量）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//①</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//②</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">ft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//③</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//④</span></code></pre><p>以上代码中，’num1’ 为全局变量；’num2’ 为局部变量。①②③都可以成功输出，而④则不能成功输出，因为 ‘num2’ 为局部变量，只能在定义它的函数中使用。</p><p><strong>函数的形参也可以看作局部变量</strong></p><h3 id="3-从执行效率来看全局变量和局部变量"><a href="#3-从执行效率来看全局变量和局部变量" class="headerlink" title="3.从执行效率来看全局变量和局部变量"></a>3.从执行效率来看全局变量和局部变量</h3><ol><li>全局变量只有在浏览器关闭时才会销毁，比较占内存资源；</li><li>局部变量当我们程序执行完毕就会销毁，比较节约内存资源。</li></ol><h2 id="三、作用域链"><a href="#三、作用域链" class="headerlink" title="三、作用域链"></a>三、作用域链</h2><p>如果在函数中还有函数，那么在这个作用域中就又诞生了一个作用域。</p><p>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作<strong>”作用域链“</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>例如，在以上代码中，在函数 ‘fun’ 中使用 ‘console.log’ 输出 ‘num’ ，因为在函数 ‘fun’ 没有声明 ‘num’ 变量，所以会向“上一层”函数 ‘fn’ 中查找，即 ‘num &#x3D; 20’ ，则控制台输出 ‘20’ ；假如在函数 ‘fn’ 中也没有声明 ‘num’ 变量，则会向函数 ‘fn’ 的上一层查找，即 ‘num &#x3D; 10’ ，以此类推。<strong>（就近原则）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript—函数</title>
      <link href="/2022/02/13/javascript-han-shu/"/>
      <url>/2022/02/13/javascript-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript—函数"><a href="#JavaScript—函数" class="headerlink" title="JavaScript—函数"></a>JavaScript—函数</h1><h2 id="一、函数的概念"><a href="#一、函数的概念" class="headerlink" title="一、函数的概念"></a>一、函数的概念</h2><p>在JS中，可能会定义非常多的相同代码或者功能相似的代码，这些代码可能需要大量重复使用。虽然for循环语句也能实现一些简单的操作，但是比较具有局限性，此时我们就可以使用JS中的函数。</p><p><strong>函数：</strong>就是封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。</p><h2 id="二、函数的使用"><a href="#二、函数的使用" class="headerlink" title="二、函数的使用"></a>二、函数的使用</h2><h3 id="1-声明函数"><a href="#1-声明函数" class="headerlink" title="1.声明函数"></a>1.声明函数</h3><p>语法：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>注意：</p><ol><li><p>function 声明函数的关键字，全部小写；</p></li><li><p>函数名一般为动词；</p></li><li><p>函数不调用不会执行</p></li></ol><h3 id="2-调用函数"><a href="#2-调用函数" class="headerlink" title="2.调用函数"></a>2.调用函数</h3><p><code>函数名( )</code></p><h2 id="三、函数的参数"><a href="#三、函数的参数" class="headerlink" title="三、函数的参数"></a>三、函数的参数</h2><ol><li><p>形参和实参   </p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span>形参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span>实参<span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>在声明函数的小括号里面是形参（形式上的参数）</li><li>在函数调用的小括号里是实参（实际的参数）</li></ol></li><li><p>形参和实参的执行过程</p></li></ol><p>JS代码在执行时，遇到调用函数时，会将实参传递给形参，也就是说，形参相当于一个变量，用于接收实参。</p><ol start="3"><li>函数形参和实参的匹配问题    <ol><li>如果函数实参和形参的个数一致，则正常输出结果；</li><li>如果函数实参的个数多于形参的个数，多余的实参会被舍弃；</li><li>如果函数实参的个数少于形参的个数，多余的形参会被定义为undefined。</li></ol></li></ol><h2 id="四、函数的返回值-return"><a href="#四、函数的返回值-return" class="headerlink" title="四、函数的返回值 return"></a>四、函数的返回值 return</h2><ol><li><p>语法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> 需要返回的结果；<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ol><li>函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名；</li><li>只要函数遇到return，就会把后面的结果返回给函数的调用者；</li><li>函数的调用者为<code>函数名()</code>。</li></ol></li><li><p>注意事项    </p><ol><li>return会终止函数；</li><li>return只能返回一个值或者一个数组，返回的结果是最后一个值；（针对数字型）</li><li>如果函数没有return，返回值为undefined；</li><li>return不仅针对函数，若是函数中有循环并且循环中包含return，return会终止循环并且推出函数。</li></ol></li></ol><h2 id="五、arguments的使用"><a href="#五、arguments的使用" class="headerlink" title="五、arguments的使用"></a>五、arguments的使用</h2><p>当我们不确定有多少参数传递的时候，可以用arguments来获取。在JavaScript中，arguments实际上它是当前函数的一个<strong>内置对象</strong>。所有函数都内置了一个arguments对象，arguments对象中<strong>存储了传递的所有实参</strong>。</p><ol><li>arguments以<strong>伪数组</strong>的形式存储所有实参；<ol><li>伪数组具有数组的length属性；</li><li>按照索引的方式进行存储；</li><li>没有真正数组的一些方法，如：pop( )，push ( ) 等等。</li></ol></li><li>可以按照数组的方式遍历arguments；</li><li>只有函数才有arguments对象并且每个函数已经内置了arguments对象。</li></ol><h2 id="六、函数的两种声明方式"><a href="#六、函数的两种声明方式" class="headerlink" title="六、函数的两种声明方式"></a>六、函数的两种声明方式</h2><ol><li>利用函数关键字自定义函数（命名函数）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>函数表达式（匿名函数）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> 变量名 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>匿名函数使用<strong>变量名</strong>调用函数。</p><hr><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="1-利用函数计算1-100之间的累加和"><a href="#1-利用函数计算1-100之间的累加和" class="headerlink" title="1.利用函数计算1-100之间的累加和"></a>1.利用函数计算1-100之间的累加和</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.声明函数</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.调用函数</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-利用函数求任意两数的和"><a href="#2-利用函数求任意两数的和" class="headerlink" title="2.利用函数求任意两数的和"></a>2.利用函数求任意两数的和</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数的实参可为任意数字</span></code></pre><h3 id="3-利用函数比较两个数的大小"><a href="#3-利用函数比较两个数的大小" class="headerlink" title="3.利用函数比较两个数的大小"></a>3.利用函数比较两个数的大小</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">=</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'两个数相等'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 也可以用三元表达式：</span>    <span class="token comment" spellcheck="true">// return num1 > num2 ? num1 : num2;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-利用函数求任意一个数组中的最大值"><a href="#4-利用函数求任意一个数组中的最大值" class="headerlink" title="4.利用函数求任意一个数组中的最大值"></a>4.利用函数求任意一个数组中的最大值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArrMax</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getArrMax</span><span class="token punctuation">(</span>任意数组<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-利用函数求任意个数的数字的最大值"><a href="#5-利用函数求任意个数的数字的最大值" class="headerlink" title="5.利用函数求任意个数的数字的最大值"></a>5.利用函数求任意个数的数字的最大值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> amx <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getMax</span><span class="token punctuation">(</span>任意个实参<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-利用函数翻转任意数组"><a href="#6-利用函数翻转任意数组" class="headerlink" title="6.利用函数翻转任意数组"></a>6.利用函数翻转任意数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>任意数组<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-用户输入年份，输出当年2月份天数"><a href="#7-用户输入年份，输出当年2月份天数" class="headerlink" title="7.用户输入年份，输出当年2月份天数"></a>7.用户输入年份，输出当年2月份天数</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">backDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'请输入年份：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">'年有29天。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>year <span class="token operator">+</span> <span class="token string">'年有28天。'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isRunYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">backDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript—数组</title>
      <link href="/2022/02/11/javascript-shu-zu/"/>
      <url>/2022/02/11/javascript-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-数组"><a href="#JavaScript-数组" class="headerlink" title="JavaScript-数组"></a>JavaScript-数组</h1><h2 id="一、创建数组"><a href="#一、创建数组" class="headerlink" title="一、创建数组"></a>一、创建数组</h2><ol><li><strong>new</strong></li></ol><p>​        语法：</p><p>​        <code>var 数组名 = new Array();</code>       &#x2F;&#x2F;创建空数组</p><p>​        <strong>※ 注意大写的A</strong></p><ol start="2"><li><strong>利用数组字面量创建数组</strong>（常用）</li></ol><p>​        语法：</p><p>​        <code>var 数组名 = [];</code></p><p>​        利用数组字面量创建数组可以给数组赋初始值（数组初始化），数组中的元素要用逗号分隔。</p><p>​        数组中的元素可以是任意类型，比如数字型，字符型，布尔型等。</p><h2 id="二、访问数组元素"><a href="#二、访问数组元素" class="headerlink" title="二、访问数组元素"></a>二、访问数组元素</h2><ol><li><strong>数组的索引</strong></li></ol><p>​        索引（下标）：用来访问数组的序号，<strong>数组下标从0开始</strong>。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//索引号：   0      1      2       3</span></code></pre><p>​        例如：</p><p>​        <code>console.log(arr[1]);</code></p><p>​        将会在控制台输出：李四。</p><ol start="2"><li><strong>遍历数组</strong></li></ol><p>​        通过<strong>循环</strong>把数组中的元素从头到尾访问一次。</p><p>​        例如：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>​        由于数组下标从0开始，所以 i 要从0开始，因为数组下标最大为3，所以for循环的条件为i &lt; 3。</p><p>​        结果便是在控制台依次输出：张三，李四，王五，刘六。</p><h2 id="三、数组长度"><a href="#三、数组长度" class="headerlink" title="三、数组长度"></a>三、数组长度</h2><p>​        使用<code>数组名.length</code>可以访问数组的数量（数组长度）。</p><p>​        在遍历数组时，for循环的条件一般不使用明确的数组，因为当数组元素非常多时，去数元素个数是比较麻烦也是不明智的选择，而且数组中的元素可能会进行增删，数组下标也会随之变化。</p><p>​        所以在实际开发中，遍历数组时for循环的条件应改为<code>i &lt; arr.length</code>比较合适。</p><p>​        即：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="四、新增数组元素"><a href="#四、新增数组元素" class="headerlink" title="四、新增数组元素"></a>四、新增数组元素</h2><ol><li><strong>修改length长度。</strong></li></ol><p>​        数组length值可以获取，也可以修改，修改方法就是直接给<code>数组名.length </code>赋值。</p><p>​        例如：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p>​        此时，数组arr中有5个元素，当然，由于没有给第五个元素赋值，所以第五个元素为空且默认值为undefined。</p><ol start="2"><li><strong>修改数组索引号新增数组元素</strong></li></ol><p>​        例如，想在数组arr中追加一个元素“王八”：</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token string">'刘六'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'王八'</span>；</code></pre><p>​        同时，可以通过这种方法修改已有的数组元素，例如<code>arr[1] = &#39;李九&#39;;</code>，数组中的 ‘李四’ 便被修改为 ‘李九’ 。</p><p>​        <strong>注意：</strong>如果新增或修改元素的数据类型为字符型，需要加引号；不要直接给数组名赋值，否则数组中的元素会全部被覆盖。</p><hr><h2 id="五、综合案例"><a href="#五、综合案例" class="headerlink" title="五、综合案例"></a>五、综合案例</h2><h3 id="案例1：筛选数组元素"><a href="#案例1：筛选数组元素" class="headerlink" title="案例1：筛选数组元素"></a>案例1：筛选数组元素</h3><p>将数组<code>arr = [2,0,6,1,77,0,52,0,25,7]</code>中大于10的元素筛选出来并存入一个新数组。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="案例2：调换元素顺序"><a href="#案例2：调换元素顺序" class="headerlink" title="案例2：调换元素顺序"></a>案例2：调换元素顺序</h3><p>将数组<code>arr = [&#39;red&#39;,&#39;green&#39;,&#39;blue&#39;,&#39;pink&#39;,&#39;yellow&#39;]</code>中的内容反过来存放。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">,</span><span class="token string">'pink'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    newArr<span class="token punctuation">[</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="案例3：数组排序（冒泡排序）"><a href="#案例3：数组排序（冒泡排序）" class="headerlink" title="案例3：数组排序（冒泡排序）"></a>案例3：数组排序（冒泡排序）</h3><p>将数组<code>arr[3,5,4,1,2]</code>中的元素从小到大排序。</p><p>原理：一次比较两个元素，如果不符合排序，则将这两个元素交换位置。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站分享（持续更新）</title>
      <link href="/2022/02/10/wang-zhan-fen-xiang/"/>
      <url>/2022/02/10/wang-zhan-fen-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="网站分享（持续更新）"><a href="#网站分享（持续更新）" class="headerlink" title="网站分享（持续更新）"></a>网站分享（持续更新）</h1><p>这篇文章分享一些我经常用到的网站，其中包括资源、工具等类别的网站。</p><h2 id="一、资源类"><a href="#一、资源类" class="headerlink" title="一、资源类"></a>一、资源类</h2><h3 id="1-Stocksnap"><a href="#1-Stocksnap" class="headerlink" title="1.Stocksnap"></a>1.Stocksnap</h3><p>Stocksnap是国外的一个免费图片素材库，图片质量很高，数量也很多，Stocksnap收集的图片都是来自于世界各地的优秀摄影师分享，所以图片质量很高，数量也很多，但是貌似是每天下载数量有限制。</p><p>网站国内能访问，但是访问速度非常慢，要经常使用的话建议使用一些魔法🤫</p><p><img src="https://s2.loli.net/2022/02/10/jt8qDchsU3xyI5Q.png"></p><p><strong>链接：</strong><a href="http://stocksnap.com/">StockSnap： stocksnap.com</a></p><h3 id="2-PNG-images"><a href="#2-PNG-images" class="headerlink" title="2.PNG images"></a>2.PNG images</h3><p>PNG images同样是国外的一个免费的图片素材网站，但是其中的素材全部是png格式的，网站没有。</p><p>PNG images的分类做的可以说是相当不错，几乎包括你需要的一切类目，比如animals、nature、fruit等等。</p><p>网站没有任何花里胡哨的功能，甚至没有登陆按钮（至少我现在还没发现😁），只有满屏的分类和“成千上万”的搜索标签（真的很多）。</p><p><img src="https://s2.loli.net/2022/02/10/Jo3TwIzbKAcqV5U.png"></p><p>说是图片资源，其实我认为说PNG images是一个图片元素的素材网站比较合适，因为在里面得到的素材并不是一张完整的图片，而是你搜索的元素。比如你在PNG images中搜索bird，你得到是下面这样：</p><p><img src="https://s2.loli.net/2022/02/10/KfGds1ZtyDT92kH.png"></p><p>我认为PNG images还是非常实用的，尤其是经常进行平面设计的同学，里面的素材真的非常非常多。</p><p><strong>链接：</strong><a href="http://pngimg.com/">PNG images：pngimg.com</a></p><h3 id="3-CUPCAKE"><a href="#3-CUPCAKE" class="headerlink" title="3.CUPCAKE"></a>3.CUPCAKE</h3><p>CUPCAKE和Stocksnap类似，同样来自国外，不同的是，CUPCAKE是由摄影师Jonas Wimmerström创建的，其中的图片也都是他自己拍摄的图片，图片数量比不上但是Stocksnap，但是质量也都非常不错。</p><p>我个人认为，CUPCAKE可能比Stocksnap更“纯粹”一些，真的是纯粹的免费，你不但可以下载，还可以随意修改和发布，甚至还可以作为商用。</p><p>当然，国外的网站嘛，国内虽然能访问，但是还是建议使用一些魔法，体验会更好。</p><p><img src="https://s2.loli.net/2022/02/10/LlN4QkrPnUBtf3G.png"></p><p><strong>链接：</strong><a href="https://cupcake.nilssonlee.se/">Cupcake：cupcake.nilssonlee.se</a></p><h3 id="4-站长素材"><a href="#4-站长素材" class="headerlink" title="4.站长素材"></a>4.站长素材</h3><p>国内比较老，也是大部分人都知道的一个素材网站。</p><p>站长素材的资源相对比较综合，包括高清图片，psd等格式的图片素材，还包括网页模板、脚本等素材。类目比较杂，大致分类附图：</p><p><img src="https://s2.loli.net/2022/02/10/xWQNqUetzKABlmO.png"></p><p><strong>链接：</strong><a href="https://sc.chinaz.com/">站长素材： sc.chinaz.com</a></p><h3 id="5-NavNav"><a href="#5-NavNav" class="headerlink" title="5.NavNav+"></a>5.NavNav+</h3><p>这个网站推荐给所有做前端的同学。</p><p>NavNav+是一个分享网页组件的网站，在NavNav+中你几乎可以找到你网页中所有需要用到的组件，比如按钮、加载动画、登录框等，内容质量很高，各种组件的分类也做的很好，使用也很方便。</p><p><img src="https://s2.loli.net/2022/02/10/4T9xYWoyKMmLOVd.png"></p><p>当你点开一个组件，你会得到它的HTML、CSS和JS代码，你可以直接复制使用，也可以根据需求进行一些调整，也可以在其给出的控制台进行可视化的调整。</p><p><img src="https://s2.loli.net/2022/02/10/AMjvOFwuGWeExT2.png"></p><p>网站国内可以正常访问，速度不快，但是在能接受的范围里面，不需要借助魔法。</p><p><strong>链接：</strong><a href="http://navnav.co/">NavNav+：navnav.co</a></p><h2 id="二、工具类"><a href="#二、工具类" class="headerlink" title="二、工具类"></a>二、工具类</h2><h3 id="1-removebg"><a href="#1-removebg" class="headerlink" title="1.removebg"></a>1.removebg</h3><p>removebg是一个在线的消除图片背景的网站，说白了就是抠图，网站可以免费使用，但是处理过的图片分辨率会稍微低一些，由于我用这个网站主要处理人像，所以我使用觉得影响不大。如果是强迫症患者，可以付费使用（可以但没必要，个人感觉降低的分辨率影响不大）。</p><p><img src="https://s2.loli.net/2022/02/10/ilyPAMfLwzreck7.png"></p><p>它的处理速度和质量个人认为是相当的高，基本我每次扣人像都是可以达到头发丝的精度（即使图片背景很复杂），如果你对自动扣的图片不满意，你也可以在其处理后再进行手动抠图（我从来没有手动扣过，每次处理的都非常哇塞），算法真的牛。放图给大家对比一下：</p><p>原图：</p><p><img src="https://s2.loli.net/2022/02/10/vijrK2cbxVdlA6h.png"></p><p>处理后：</p><p><img src="https://s2.loli.net/2022/02/10/q8c25VOpwEBg9FM.png"></p><p>removebg同时也有客户端，但是个人认为没有必要下载，因为客户端和网页端的功能完全相同，处理图片也没有质量上的差别，我使用过程中感受到的最大的差别是客户端处理图片的速度会稍快一些（网页端已经够快了），而且处理完成之后不需要下载，会直接将png格式的图片保存到你指定的文件夹中。</p><p><strong>链接：</strong><a href="https://www.remove.bg/zh/">remove.bg：www.remove.bg/zh</a></p><h3 id="2-SM-SM"><a href="#2-SM-SM" class="headerlink" title="2.SM.SM"></a>2.SM.SM</h3><p>sm.ms是一个可以免费使用的在线图床，搭建网站的同学应该了解图床是什么，简单科普一下：如果你的网站使用了的图片，你会将图片放在你服务器中的某个地方，对于服务器来说就是放在本地（不是你正在使用的电脑哟），如果网站中的图片比较少，那么影响并不大，如果图片少我更推荐你放在本地。但是当你的网站中有大量图片，而且这些图片你还是全部放在本地的话，那么就会产生一些问题，首先是这样非常占用服务器的存储资源，这也是主要问题，其次，大量的图片会导致你的网站加载速度会变慢。</p><p>此时有一个解决办法，就是你再买一台服务器来专门存放图片，然后你网站用到的图片从这个服务器里面调取，这个服务器就是图床。</p><p>SM.MS便是相当于这样一台服务器，你可以将图片上传到SM.MS，而SM.MS会给你生成图片的链接，你可以直接使用。</p><p><img src="https://s2.loli.net/2022/02/10/BfxFwKQ4rmR2s6t.png"></p><p>免费用户有5G的存储空间，这对于一些个人的网站是足够使用的。如果你使用一些工具将图片压缩一下再上传，5G也可以存储相当多的图片。在SM.MS调用图片加载速度个人认为还是比较快的。</p><p>SM.MS有移动端的APP，但是需要通过谷歌商店才能下载，下载需要使用魔法，但是使用不需要。如果需要安装包可以关注（微信公众号：奶茶九分糖）回复SM.MS获取。</p><p><strong>链接：</strong><a href="https://sm.ms/"> sm.ms</a></p><h3 id="3-LeanCloud"><a href="#3-LeanCloud" class="headerlink" title="3.LeanCloud"></a>3.LeanCloud</h3><p>LeanCloud是一个BssS提供商，具体什么是BaaS，了解不多，不敢乱说，详见百度：<a href="baike.baidu.com/item/BaaS/271609?fr=aladdin">BaaS</a>。</p><p><img src="https://s2.loli.net/2022/02/10/qaEwxTjtcuG6BXU.png"></p><p>我是这么理解的，可能不是很准确，如果有了解的同学，欢迎在评论区留言指正，我个人将LeanCloud是当作一个“云引擎”来使用，也可以说是一种云计算服务吧，比如评论功能，总得有个后台处理一下数据吧，比如本篇文章下面的评论系统和本博客的BB功能就是使用LeanCloud处理的后台数据。</p><p><img src="https://s2.loli.net/2022/02/10/cNOQ6KqhAm4gp7Y.png"></p><p><img src="https://s2.loli.net/2022/02/10/tlwg2kqBMJObao1.png"></p><p>LeanCloud分为国际版和中国版，推荐使用国际版，原因不敢多说，怕被请喝茶。</p><p><strong>链接：</strong><a href="https://www.leancloud.cn/">LeanCloud中国版：www.leancloud.cn</a>     <a href="https://leancloud.app/">LeanCloud国际版：leancloud.app</a></p><h3 id="4-Neumorphism"><a href="#4-Neumorphism" class="headerlink" title="4.Neumorphism"></a>4.Neumorphism</h3><p>Neumorphism是一个在线设计网页按钮、容器的网站，更具体的说是通过阴影来得到不同视觉效果的容器。</p><p>你可以在上面用可视化的方式调整你需要的按钮、容器的样式，可以修改颜色、大小、阴影角度、视觉效果等，并实时生成CSS代码。</p><p><img src="https://s2.loli.net/2022/02/10/VOZ9ycbuLTCa5Kq.png"></p><p><strong>链接：</strong><a href="https://neumorphism.io/">Neumorphism：neumorphism.io</a></p><h3 id="5-W3school"><a href="#5-W3school" class="headerlink" title="5.W3school"></a>5.W3school</h3><p>W3school准确来说是一个学习类的网站，之所以我将其归类到工具类，是因为我认为可以将W3school当作一个在线的手册使用，你可以随时在上面查询到HTML中某个标签或者CSS中某个属性的用法，并且还可以在线写代码，并且实时生成网页效果。</p><p>W3school中包括的Web技术比较全面，包括基本的HTML、CSS、JS以及服务器脚本和XML系列。</p><p><img src="https://s2.loli.net/2022/02/10/IJABjL14QNP5CgZ.png"></p><p><strong>链接：</strong><a href="https://www.w3school.com.cn/">w3school：www.w3school.com.cn</a></p><hr><hr><hr><p>（本篇文章持续更新）</p><p>（本篇文章所用图片和部分内容来源于网络，如有侵权，请联系我，我将在第一时间删除侵权内容，感谢！）</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 资源 </tag>
            
            <tag> 工具 </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2022/02/06/markdown-yu-fa/"/>
      <url>/2022/02/06/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><ol><li>#              一级标题</li><li>##           二级标题</li><li>###         三级标题</li><li>####       四级标题</li><li>#####    五级标题</li><li>######  六级标题</li></ol><p>tips：大纲中一级标题中包含二级标题，二级标题包含三级标题，….，#后需要加空格。</p><h2 id="二、强调语法"><a href="#二、强调语法" class="headerlink" title="二、强调语法"></a>二、强调语法</h2><ol><li>斜体：*  *</li><li>加粗：**  **</li><li>倾斜加粗：***  ***</li><li>删除线：~~  ~~</li></ol><p>tips：符号与文字间不需要加空格。</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span>斜体<span class="token punctuation">*</span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"> <span class="token bold"><span class="token punctuation">**</span>加粗<span class="token punctuation">**</span></span></code></pre><pre class=" language-markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span>*倾斜加粗<span class="token punctuation">**</span></span>*</code></pre><pre class=" language-markdown"><code class="language-markdown">~~删除线~~</code></pre><p>显示效果：</p><p><em>斜体</em></p><p> <strong>加粗</strong></p><p><em><strong>倾斜加粗</strong></em></p><p><del>删除线</del></p><h2 id="三、分割线"><a href="#三、分割线" class="headerlink" title="三、分割线"></a>三、分割线</h2><ol><li>***</li><li>---</li></ol><p>tips：在一行中使用三个以上的 * 或者 - 来创建一条分割线，此行中不可有其他内容。</p><h2 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;。</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 引用的文字<span class="token blockquote punctuation">> ></span> 引用的文字<span class="token blockquote punctuation">> > ></span> 引用的文字</code></pre><p>显示效果：</p><blockquote><p>引用的文字</p><blockquote><p>引用的文字</p><blockquote><p>引用的文字</p></blockquote></blockquote></blockquote><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>![ 图片的alt](图片的路径 &quot;图片的title&quot;)</p><p>tips：alt为图片不能正常显示时页面显示的文字，title为鼠标移动到图片上显示的文字，路径可以为网络地址，也可以为本地图片，可以使用相对路径和绝对路径。</p><p><strong>示例：</strong></p><p>​        代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">![logo](../imgs/logo.png)</span></code></pre><p>​        显示效果：</p><p><img src="http://img.cikian.cn/blog-img/logo.png"></p><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>[超链接名](地址 <a href="http://xxx.xxx.xxx/">http://xxx.xxx.xxx\</a>)</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token url">[Cikian的Github](https://github.com/Cikian)</span></code></pre><p>显示效果：</p><p><a href="https://github.com/Cikian">Cikian的Github</a></p><p>tips：MarkDown本身语法不支持链接在新页面打开，如果想要在新页面打开，可以使用html的a标签代替。</p><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1.无序列表"></a>1.无序列表</h3><p>无序列表使用 - + *任何一种都可以</p><p>- 列表内容</p><p>+ 列表内容</p><p>* 列表内容</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 列表内容<span class="token list punctuation">*</span> 列表内容<span class="token list punctuation">*</span> 列表内容</code></pre><p>显示效果：</p><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2.有序列表"></a>2.有序列表</h3><p>有序列表使用数字加英文的句点.</p><p>1. 列表内容</p><p>2. 列表内容</p><p>3. 列表内容</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 列表内容<span class="token list punctuation">2.</span> 列表内容<span class="token list punctuation">3.</span> 列表内容</code></pre><p>显示效果：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="3-列表的嵌套"><a href="#3-列表的嵌套" class="headerlink" title="3.列表的嵌套"></a>3.列表的嵌套</h3><p>上一级和下一级之间敲三个空格即可</p><p><strong>示例：</strong></p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 一级无序列表  <span class="token list punctuation">*</span> 二级无序列表  <span class="token list punctuation">*</span> 二级无序列表<span class="token list punctuation">*</span> 一级无序列表    <span class="token list punctuation">*</span> 一级无序列表  <span class="token list punctuation">*</span> 一级无序列表</code></pre><p>显示效果：</p><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表</li></ul></li><li>一级无序列表  <ul><li>一级无序列表</li><li>一级无序列表</li></ul></li></ul><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>表头|表头|表头</p><p>—|:—:|—:</p><p>内容|内容|内容</p><p>内容|内容|内容</p><p>tips：文字默认左对齐，两边加：表示居中，右边加：表示右对齐。</p><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><ol><li>单行代码，代码用一个反引号包起来。</li><li>多行代码，代码之间分别用三个反引号包起来，且两边的反引号单独占一行。</li></ol><p><strong>示例：</strong></p><ol><li><p>单行代码：</p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">`int a,b,c;`</span></code></pre><p>显示效果：</p><p><code>int a,b,c;</code></p></li><li><p>代码块：</p><p>代码：</p><pre class=" language-markdown"><code class="language-markdown">```if (a&lt;=5){<span class="token code keyword">    console.log('代码块示例。')</span>};```</code></pre><p>显示效果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码块示例。'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
